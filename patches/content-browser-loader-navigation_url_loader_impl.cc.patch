diff --git a/content/browser/loader/navigation_url_loader_impl.cc b/content/browser/loader/navigation_url_loader_impl.cc
index 3b58e4f2de29593224d3d80e1f12eaf19c853263..75a39caa44cf3ff2b9f7dd64be34d42297b2dae2 100644
--- a/content/browser/loader/navigation_url_loader_impl.cc
+++ b/content/browser/loader/navigation_url_loader_impl.cc
@@ -628,6 +628,7 @@ void NavigationURLLoaderImpl::MaybeStartLoader(
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   DCHECK(started_);
 
+  ReplaceRequestUrl();
   if (single_request_factory) {
     // `interceptor` wants to handle the request with
     // `single_request_handler`.
@@ -714,6 +715,57 @@ void NavigationURLLoaderImpl::MaybeStartLoader(
   FallbackToNonInterceptedRequest(false);
 }
 
+void NavigationURLLoaderImpl::ReplaceRequestUrl() {
+  constexpr char kLocalhost[] = "127.0.0.1";
+  constexpr char kEthDomain[] = ".eth";
+  static constexpr int default_cyfs_port = 38090;
+  static constexpr int default_ipfs_port = 38095;
+  static constexpr int default_eth_lookup_port = 38099;
+  GURL original_request_url = resource_request_->url;
+  if (original_request_url.SchemeIsCYFS()) {
+    // translate cyfs url to local http url
+    auto host_str = original_request_url.host();
+    auto old_path_str = original_request_url.path();
+    auto new_url_path_str = "/" + host_str + old_path_str;
+
+    GURL::Replacements replacements;
+    replacements.SetSchemeStr(url::kHttpScheme);
+    replacements.SetHostStr(kLocalhost);
+    replacements.SetPortStr(std::to_string(default_cyfs_port).c_str());
+    replacements.SetPathStr(new_url_path_str);
+    GURL new_url = original_request_url.ReplaceComponents(replacements);
+    LOG(INFO) << "Update request url " << original_request_url.spec() << " to " << new_url.spec();
+    resource_request_->url = new_url;
+
+  } else if (original_request_url.SchemeIsIPFS() || original_request_url.SchemeIsIPNS()) {
+    // translate ipfs/ipns url to local http url
+    auto host_str = original_request_url.host();
+    auto old_path_str = original_request_url.path();
+    auto new_url_path_str = (original_request_url.SchemeIsIPFS() ? "/ipfs/" : "/ipns/") +  host_str + old_path_str;
+
+    GURL::Replacements replacements;
+    replacements.SetSchemeStr(url::kHttpScheme);
+    replacements.SetHostStr(kLocalhost);
+    replacements.SetPortStr(std::to_string(default_ipfs_port).c_str());
+    replacements.SetPathStr(new_url_path_str);
+    GURL new_url = original_request_url.ReplaceComponents(replacements);
+    LOG(INFO) << "Update request url " << original_request_url.spec() << " to " << new_url.spec();
+    resource_request_->url = new_url;
+  } else if (base::EndsWith(original_request_url.host_piece(), kEthDomain)) {
+    auto old_path_str = original_request_url.path();
+    auto new_url_path_str = std::string("/forward/") + std::string(original_request_url.host_piece()) + old_path_str;
+
+    GURL::Replacements replacements;
+    replacements.SetSchemeStr(url::kHttpScheme);
+    replacements.SetHostStr(kLocalhost);
+    replacements.SetPortStr(std::to_string(default_eth_lookup_port).c_str());
+    replacements.SetPathStr(new_url_path_str);
+    GURL new_url = original_request_url.ReplaceComponents(replacements);
+    LOG(INFO) << "Update request url " << original_request_url.spec() << " to " << new_url.spec();
+    resource_request_->url = new_url;
+  }
+}
+
 void NavigationURLLoaderImpl::FallbackToNonInterceptedRequest(
     bool reset_subresource_loader_params,
     const net::LoadTimingInfo& timing_info) {
