diff --git a/third_party/blink/renderer/platform/loader/fetch/url_loader/resource_request_sender.cc b/third_party/blink/renderer/platform/loader/fetch/url_loader/resource_request_sender.cc
index 756e6fca4b121c152ca36e66f7b224fdc2c8cd61..deaae5a5e0242ea75027d413b1265f747a571bf2 100644
--- a/third_party/blink/renderer/platform/loader/fetch/url_loader/resource_request_sender.cc
+++ b/third_party/blink/renderer/platform/loader/fetch/url_loader/resource_request_sender.cc
@@ -23,6 +23,7 @@
 #include "net/base/load_flags.h"
 #include "net/base/net_errors.h"
 #include "net/base/request_priority.h"
+#include "net/http/http_request_headers.h"
 #include "net/http/http_response_headers.h"
 #include "net/url_request/referrer_policy.h"
 #include "services/network/public/cpp/features.h"
@@ -151,6 +152,14 @@ void ResourceRequestSender::SendSync(
         resource_load_info_notifier_wrapper) {
   CheckSchemeForReferrerPolicy(*request);
 
+  auto request_initiator_string = request->request_initiator.value_or(url::Origin()).Serialize();
+  const std::string EXTENSION_PREFIX = "chrome-extension://";
+  if (base::StartsWith(request_initiator_string, EXTENSION_PREFIX)) {
+    std::string extension_id;
+    base::TrimString(request_initiator_string, EXTENSION_PREFIX, &extension_id);
+    request->headers.SetHeaderIfMissing(net::HttpRequestHeaders::KCyfsBrowserExtension, extension_id);
+  }
+
   DCHECK(loader_options & network::mojom::kURLLoadOptionSynchronous);
   DCHECK(request->load_flags & net::LOAD_IGNORE_LIMITS);
 
@@ -236,6 +245,14 @@ int ResourceRequestSender::SendAsync(
   }
 #endif
 
+  auto request_initiator_string = request->request_initiator.value_or(url::Origin()).Serialize();
+  const std::string EXTENSION_PREFIX = "chrome-extension://";
+  if (base::StartsWith(request_initiator_string, EXTENSION_PREFIX)) {
+    std::string extension_id;
+    base::TrimString(request_initiator_string, EXTENSION_PREFIX, &extension_id);
+    request->headers.SetHeaderIfMissing(net::HttpRequestHeaders::KCyfsBrowserExtension, extension_id);
+  }
+
   // Compute a unique request_id for this renderer process.
   int request_id = GenerateRequestId();
   request_info_ = std::make_unique<PendingRequestInfo>(
