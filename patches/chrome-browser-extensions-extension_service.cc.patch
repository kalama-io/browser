diff --git a/chrome/browser/extensions/extension_service.cc b/chrome/browser/extensions/extension_service.cc
index 8f0d563763ee017d683bcb9a78eba7acd2f08bc6..b71e4e37f8b11ca74aae168df238c5a402ea617e 100644
--- a/chrome/browser/extensions/extension_service.cc
+++ b/chrome/browser/extensions/extension_service.cc
@@ -82,6 +82,7 @@
 #include "content/public/browser/notification_service.h"
 #include "content/public/browser/render_process_host.h"
 #include "content/public/browser/storage_partition.h"
+#include "extensions/browser/pref_names.h"
 #include "extensions/browser/blocklist_extension_prefs.h"
 #include "extensions/browser/blocklist_state.h"
 #include "extensions/browser/disable_reason.h"
@@ -805,6 +806,24 @@ bool ExtensionService::UninstallExtension(
   // Callers should not send us nonexistent extensions.
   CHECK(extension.get());
 
+  {
+    base::FilePath extension_path = extension->path();
+    VLOG(1) << "uninstall extension, path = " << extension_path
+          << " id = " << extension->id();
+    std::string extension_path_name = extension_path.BaseName().AsUTF8Unsafe();
+    {
+      PrefService* prefs = profile()->GetPrefs();
+      ListPrefUpdate update(prefs, pref_names::KDefaultExtensionBlackList);
+      base::Value* default_extension_blacklist = update.Get();
+      VLOG(1) << "Add extension " << extension_path_name << " to default extension black list";
+      default_extension_blacklist->Append(extension_path_name);
+    }
+    // delete extension path
+    if (base::PathExists(extension_path)) {
+      base::DeletePathRecursively(extension_path);
+    }
+  }
+
   ManagementPolicy* by_policy = system_->management_policy();
   // Policy change which triggers an uninstall will always set
   // |external_uninstall| to true so this is the only way to uninstall
